@*@model CheckoutConfirmModel
    @{
        Layout = "_ColumnsOne";

        //title
        Html.AddTitleParts(T("PageTitle.Checkout").Text);
        //page class
        Html.AppendPageCssClassParts("html-checkout-page");
        Html.AppendPageCssClassParts("html-order-confirm-page");
    }
    <div class="page checkout-page order-confirm-page">
        @await Component.InvokeAsync("CheckoutProgress", new { step = CheckoutProgressStep.Confirm })
        <div class="page-title">
            <h1>@T("Checkout.ConfirmYourOrder")</h1>
        </div>
        <div class="page-body checkout-data">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutConfirmTop })
            <div class="section confirm-order">
                <form asp-route="CheckoutConfirm" method="post" id="confirm-order-form">
                    <script asp-location="Footer">
                        $(document).ready(function () {
                            $('.confirm-order-next-step-button').on('click', function () {
                                //terms of service
                                var termOfServiceOk = true;
                                if ($('#termsofservice').length > 0) {
                                    //terms of service element exists
                                    if (!$('#termsofservice').is(':checked')) {
                                        $("#terms-of-service-warning-box").dialog();
                                        termOfServiceOk = false;
                                    } else {
                                        termOfServiceOk = true;
                                    }
                                }
                                if (termOfServiceOk) {
                                    //$('#confirm-order-form').submit();
                                    //$('.confirm-order-next-step-button').prop('disabled', true);
                                    return true;
                                } else {
                                    return false;
                                }
                            });
                        });
                    </script>
                    @if (!string.IsNullOrEmpty(Model.MinOrderTotalWarning))
                    {
                        <span class="min-order-warning">@Model.MinOrderTotalWarning</span>
                    }
                    else
                    {
                        if (Model.TermsOfServiceOnOrderConfirmPage)
                        {
                            <div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display: none;">
                                <p>@T("Checkout.TermsOfService.PleaseAccept")</p>
                            </div>
                            <div class="terms-of-service">
                                <input id="termsofservice" type="checkbox" name="termsofservice" />
                                <label for="termsofservice">@T("Checkout.TermsOfService.IAccept")</label>
                                @if (Model.TermsOfServicePopup)
                                {
                                    <a class="read" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
                                    <script asp-location="Footer">
                                        $(document).ready(function() {
                                            $('#read-terms').on('click',
                                                function(e) {
                                                    e.preventDefault();
                                                    displayPopupContentFromUrl('@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})', '@T("Checkout.TermsOfService")');
                                                });
                                        });
                                    </script>
                                }
                                else
                                {
                                    <a class="read" id="read-terms" href="@Url.RouteUrl("Topic", new {SeName = Html.GetTopicSeName("conditionsofuse") })">@T("Checkout.TermsOfService.Read")</a>
                                }
                            </div>
                        }
                        <div class="buttons">
                            <input type="submit" name="nextstep" value="@T("Checkout.ConfirmButton")" class="button-1 confirm-order-next-step-button" />
                        </div>
                        <script asp-location="Footer">
                            $('#confirm-order-form').on('submit',
                                function () {
                                    var button = $(this).find('input[type="submit"][name="nextstep"]');
                                    setTimeout(function () {
                                        button.prop('disabled', true);
                                    },
                                    0);
                                });
                        </script>
                    }
                    @if (Model.Warnings.Count > 0)
                    {
                        <div class="message-error">
                            <ul>
                                @foreach (var warning in Model.Warnings)
                                {
                                    <li>@warning</li>
                                }
                            </ul>
                        </div>
                    }
                </form>
            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CheckoutConfirmBottom })
            <div class="section order-summary">
                @await Component.InvokeAsync("OrderSummary", new { prepareAndDisplayOrderReviewData = true })
            </div>
        </div>
    </div>*@
@model ShoppingCartModel
@using Nop.Core
@using Nop.Core.Domain.Orders
@using Nop.Core.Domain.Tax
@inject IWebHelper webHelper
@inject IWorkContext workContext
@inject OrderSettings orderSettings
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.ShoppingCart").Text);
    //page class
    Html.AppendPageCssClassParts("html-shopping-cart-page");
}
<nav class="breadcrumb-wrap">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Bed4you</a></li>
        <li class="breadcrumb-item active"><a href="#">@T("order.confirm")</a></li>
    </ol>
</nav>
<div class="cart">
    <div class="cart-wrap">
        <div class="row">
            <div class="col-sm-10 col-md-8 col-lg-7 col-xl-6 order-2">
                <h1 class="title d-none d-lg-block">@T("ShoppingCart")</h1>
                @await Component.InvokeAsync("OrderSummary", new { overriddenModel = Model })
            </div>
            <div class="order-1 col-md-12 order-lg-2 col-lg-4">
                <div class="order-wrapp rounded">
                    <div class="title mb-4">@T("Cart.YourOrder")</div>
                    <div id="mainCartItems">
                        @foreach (var item in Model.Items)
                        {
                            <div class="item">
                                <div class="img-wrapp">
                                    <a href="@Url.RouteUrl("ProductInfo", new { SeName = item.ProductSeName })">
                                        <img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" />
                                    </a>
                                </div>
                                <a href="@Url.RouteUrl("ProductInfo", new { SeName = item.ProductSeName})">
                                    <div class="title">@item.ProductName</div>
                                </a>
                                <div class="item-name"></div>
                                <div class="count-wrap mt-2 mb-2">
                                    <button class="minus" onclick="ChangeProductQuantity(@item.ProductId, 1, -1, false)"></button>
                                    <div class="count">@item.Quantity</div>
                                    <button class="plus" onclick="ChangeProductQuantity(@item.ProductId, 1, 1, false)"></button>
                                    <div class="closee" onclick="RemoveFromCart(@item.ProductId, 1, false)"></div>
                                </div>
                                <div class="price-wrap">
                                    @if (!string.IsNullOrEmpty(item.Discount))
                                    {
                                        <div class="price-old">@item.OldPrice</div>
                                    }
                                    <div class="price">
                                        @(item.MaximumDiscountedQty.HasValue ? T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value).ToString() : item.UnitPrice)
                                        @if (!string.IsNullOrEmpty(item.Discount))
                                        {
                                            <div class="discount" style="position: unset;">-@item.Discount%</div>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="line"></div>
                        }
                    </div>
                    <div class="total-wrap mb-3 text-center">
                        <span>@T("cart.total") <span id="cart-count-full">0</span> @T("cart.total.text")</span>
                        <span><span data-price="0" id="cart-price-full">0</span> грн</span>
                        <br />
                        <small id="bonuses-earn-tip">@T("cart.willearn") @Model.WillEarnRewardPoints @T("cart.points")</small>
                        <small id="bonuses-lost-tip" style="display: none;">@T("cart.willlost") <span id="bonuses-ballance"></span> @T("cart.bonuses")</small>
                    </div>
                    <button class="btn btn-link">@T("cart.usebonuscard")</button>
                    <a href="/promo" class="btn btn-link">@T("cart.promo")</a>
                    <small>@T("cart.price.tip")</small>
                    <small>@Html.Raw(ViewBag.DebugTip)</small>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    //function UpdateCartTotal() {
    //    console.log("update cart in cart");
    //    $("#cartItems").empty();
    //    $.ajax({
    //        url: "/ShoppingCart/getcart",
    //        type: "POST",
    //        dataType: 'json',
    //        traditional: true
    //    }).done(function (responce) {
    //        var sum = 0.0;
    //        var count = 0;
    //        responce.model.Items.forEach(function (product) {
    //            sum += parseFloat(product.SubTotal);
    //            count += product.Quantity;
    //        });
    //        $("#cart-price-full").text(sum);
    //        $("#cart-price-full").data("price", sum);
    //        $("#cart-count-full").text(count);
    //        UpdateCart();
    //    });
    //}
    function UpdateFullCart() {
					$("#mainCartItems").addClass("load");
					$.ajax({
						url: "/ShoppingCart/getcart",
						type: "POST",
						dataType: 'json',
						traditional: true
					}).done(function (responce) {
						GetCrossSellProducts();
						if ($("#mainCartItems").length > 0) {
							$("#mainCartItems").empty();
						}

						var sum = 0.0;
						var count = 0;
						var data = "";
						$("#cartItems").empty();
						responce.model.Items.forEach(function (product) {
							var oldPrice = "";
							if (product.OldPrice != null && product.OldPrice != product.UnitPrice && product.OldPrice != "") {
								oldPrice = '<div class="price-old">' + product.OldPrice + '</div>';
							}
							var discount = "";
							if (product.Discount != 0 && product.Discount != null) {
								discount = '<div class="discount">-' + product.Discount + '%</div>';
							}
							var element =
								'<div class="item">' +
                                '<div class="img-wrapp">' +
                                '<a href="/' + product.ProductSeName + '">' +
                                '<img src="' + product.Picture.ImageUrl + '" alt="' + product.Picture.AlternateText + '">' + 
                                '</a>' +
                                '</div > ' +
                                '<a href="/' + product.ProductSeName + '">' +
                                '<div class="title">' + product.ProductName + '</div>' +
                                '</a>' +
								'<div class="item-name"></div>' +
								'<div class="count-wrap mt-2 mb-3">' +
								'<button class="minus" onclick="ChangeProductQuantity(' + product.ProductId + ', 1, -1, false)"></button>' +
								'<div class="count">' + product.Quantity + '</div>' +
								'<input id="it-count1" type="hidden" value="' + product.Quantity + '">' +
								'<button class="plus" onclick="ChangeProductQuantity(' + product.ProductId + ', 1, 1, false)"></button>' +
								'<div class="closee" onclick="RemoveFromCart(' + product.ProductId + ', 1, false)"></div>' +
								'</div>' +
								'<div class="price-wrap">' +
								oldPrice +
                                '<div class="price">' + product.UnitPrice +
                                discount +
                                '</div>' +
								'</div>' +
								'</div>' +
								'<div class="line"></div>';
							data = data + element;
							if ($("#mainCartItems").length > 0) {
								$("#mainCartItems").append(element);
							}
							sum += parseFloat(product.UnitPrice) * product.Quantity;
							count += product.Quantity;
						});
						$("#cart-price").text(sum);
						$("#cart-count").text(count);
						if ($("#mainCartItems").length > 0) {
							$("#cart-price-full").text(sum);
                            $("#cart-count-full").text(count);
                            $("#cart-price-full").data("price", sum);
						}
						if (sum > 0 && count > 0) {
							$("#carttotal").css("display", "block");
							$("#cartcontinue").prop("disabled", false);
						}
						else {
							$("#cartcontinue").prop("disabled", true);
							$("#carttotal").css("display", "none");
							$("#cartItems").append("<h3>@T("cart.empty")</h3>");
						}
						$("#cartItems").append(data);
						$("#mainCartItems").removeClass("load");
					});
				}
    $(document).ready(UpdateFullCart());
</script>
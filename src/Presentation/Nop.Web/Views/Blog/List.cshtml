@*@model BlogPostListModel
	@{
		Layout = "_ColumnsTwo";

		//title
		Html.AddTitleParts(T("PageTitle.Blog").Text);
		//page class
		Html.AppendPageCssClassParts("html-blog-page");
	}
	@section left {
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBlogBefore })
		@await Component.InvokeAsync("BlogMonths")
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfterBlogArchive })
		@await Component.InvokeAsync("BlogTags")
		@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBlogAfter })
	}
	<div class="page blog-page">
		<div class="page-title">
			<a href="@Url.RouteUrl("BlogRSS", new { languageId = Model.WorkingLanguageId })" class="link-rss" title="@T("Blog.RSS.Hint")">@T("Blog.RSS")</a>
			<h1>
				@if (string.IsNullOrEmpty(Model.PagingFilteringContext.Tag))
				{
					if (Model.PagingFilteringContext.GetParsedMonth().HasValue)
					{
					@string.Format(T("Blog.FilteredByMonth").Text, Model.PagingFilteringContext.GetParsedMonth().Value.Year, Model.PagingFilteringContext.GetParsedMonth().Value.ToString("MMMM"))
					}
					else
					{
					@T("Blog")
					}
				}
				else
				{
					@string.Format(T("Blog.TaggedWith").Text, Model.PagingFilteringContext.Tag)
				}
			</h1>
		</div>
		<div class="page-body">
			@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BlogListPageBeforePosts })
			<div class="blog-posts">
				@foreach (var item in Model.BlogPosts)
				{
					@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BlogListPageBeforePost, additionalData = item })
					<div class="post">
						<div class="post-head">
							<a class="post-title" href="@Url.RouteUrl("BlogPost", new {SeName = item.SeName})">@item.Title</a>
							<span class="post-date">-@item.CreatedOn.ToString("D")</span>
						</div>
						@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BlogListPageBeforePostBody, additionalData = item })
						<div class="post-body">
							@Html.Raw(!string.IsNullOrEmpty(item.BodyOverview) ? item.BodyOverview : item.Body)
						</div>
						@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BlogListPageAfterPostBody, additionalData = item })
						<div class="blog-details">
							@if (item.Tags.Count > 0)
							{
								<div class="tags">
									<label>@T("Blog.Tags"):</label>
									<ul>
										@for (var i = 0; i < item.Tags.Count; i++)
										{
											var tag = item.Tags[i];
											<li><a href="@Url.RouteUrl("BlogByTag", new {tag = tag})">@tag</a></li>
											if (i != item.Tags.Count - 1)
											{
												<li class="separator">,</li>
											}
										}
									</ul>
								</div>
							}
							<div class="buttons">
								@if (item.AllowComments)
								{
									<a href="@Url.RouteUrl("BlogPost", new {SeName = item.SeName})#comments" class="read-comments">@string.Format(T("Blog.CommentsLink").Text, item.NumberOfComments)</a>
								}
								<a href="@Url.RouteUrl("BlogPost", new {SeName = item.SeName})" class="read-more">@T("Blog.MoreInfo")</a>
							</div>
						</div>
						@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BlogListPageInsidePost, additionalData = item })
					</div>
					@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BlogListPageAfterPost, additionalData = item })
				}
			</div>
			@{
				var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
			}
			@if (!pager.IsEmpty())
			{
				<div class="pager">
					@pager
				</div>
			}
			@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.BlogListPageAfterPosts })
		</div>
	</div>*@
@model BlogPostListModel
@{
	Layout = "_ColumnsOne";

	//title
	Html.AddTitleParts(T("PageTitle.Blog").Text);
	//page class
	Html.AppendPageCssClassParts("html-blog-page");
}

<nav class="breadcrumb-wrap" aria-label="breadcrumb"></nav>

<div class="row news">
	<div class="offset-xl-1 col-xl-10">
		<h1 class="title">Статьи</h1>
		<nav class="blue-menu">
			<ul class="clearfix">
				<li><a href="">Все статьи</a></li>
				<li><a href="">Это полезно знать</a></li>
				<li><a href="">Интерьер</a></li>
				<li><a href="">Обзор мебели</a></li>
				<li><a href="">Тренды</a></li>
			</ul>
		</nav>
		<div class="article-wrap">
			@foreach (var item in Model.BlogPosts)
			{
			<div class="item-wrap">
				<div class="img-wrap">
					<img src="/img/news.png" alt="news">
					<div class="label">@item.Tags.FirstOrDefault(x => true)</div>
				</div>
				<div class="text-wrap">
					<div class="title"><a href="#">@item.Title</a></div>
					<div class="short-text">
						@Html.Raw(item.BodyOverview)
					</div>
				</div>
			</div>
			}
		</div>
	</div>
</div>